resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:

- name: om-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: om
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: replicator
  type: github-release
  source:
    user: pivotal-cf
    repository: replicator
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pivnet-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: pivnet-cli
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pipelines-repo
  type: git
  source:
    uri: ((git_url))
    branch: ((git_branch))
    username: ((git_username))
    password: ((git_token))

- name: pivnet-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_name))
    product_version: ((product_version))

- name: jq
  type: github-release
  source:
    user: stedolan
    repository: jq
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

jobs:

- name: delete-product
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
    - get: om-cli
      params:
        globs:
        - "*-linux"

  - task: unstage-tile
    file: pipelines-repo/tasks/unstage-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))

  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))

- name: replicate-and-upload-tile
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
    - get: pivnet-cli
      params:
        globs:
        - "*linux-amd64*"
    - get: replicator
      params:
        globs:
        - "*linux*"
    - get: jq
      params:
        globs:
        - "*linux64*"

  - task: replicate-and-upload-tile
    file: pipelines-repo/tasks/replicate-and-upload-tile/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))
      REPLICATOR_NAME: ((replicator_name))

  - task: upload-stemcell
    file: pipelines-repo/tasks/stemcell-uploader/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))
      IAAS_TYPE: ((iaas_type))

- name: stage-product
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [replicate-and-upload-tile]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      passed: [replicate-and-upload-tile]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*linux*"
      passed: [replicate-and-upload-tile]

  - task: stage-tile
    file: pipelines-repo/tasks/stage-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))
      DEPENDENCY_PRODUCT_TILES: ((dependency_product_tiles))
      
- name: config-product
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [stage-product]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      passed: [stage-product]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
      passed: [stage-product]
    - get: jq
      params:
        globs:
        - "*linux64*"
      passed: [replicate-and-upload-tile]

  - task: config-tile
    file: pipelines-repo/tasks/config-is-tile/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      NETWORK_NAME: ((network_name))
      OTHER_AZS: ((other_azs))
      SINGLETON_JOBS_AZ: ((singleton_jobs_az))
      PRODUCT_IDENTIFIER: ((product_identifier))
      REPLICATOR_NAME: ((replicator_name))
      ISOLATED_DIEGO_CELL_EXECUTOR_DISK_CAPACITY: ((isolated_diego_cell_executor_disk_capacity))
      ISOLATED_DIEGO_CELL_EXECUTOR_MEMORY_CAPACITY: ((isolated_diego_cell_executor_memory_capacity))
      ISOLATED_DIEGO_CELL_INSECURE_DOCKER_REGISTRY_LIST: ((isolated_diego_cell_insecure_docker_registry_list))
      ISOLATED_DIEGO_CELL_PLACEMENT_TAG: ((isolated_diego_cell_placement_tag))
      ISOLATED_HA_PROXY_INTERNAL_ONLY_DOMAINS: ((isolated_ha_proxy_internal_only_domains))
      ISOLATED_HA_PROXY_STATIC_IPS: ((isolated_ha_proxy_static_ips))
      ISOLATED_HA_PROXY_TRUSTED_DOMAIN_CIDRS: ((isolated_ha_proxy_trusted_domain_cidrs))
      ISOLATED_ROUTER_DISABLE_INSECURE_COOKIES: ((isolated_router_disable_insecure_cookies))
      ISOLATED_ROUTER_DRAIN_WAIT: ((isolated_router_drain_wait))
      ISOLATED_ROUTER_ENABLE_WRITE_ACCESS_LOGS: ((isolated_router_enable_write_access_logs))
      ISOLATED_ROUTER_ENABLE_ZIPKIN: ((isolated_router_enable_zipkin))
      ISOLATED_ROUTER_EXTRA_HEADERS_TO_LOG: ((isolated_router_extra_headers_to_log))
      ISOLATED_ROUTER_LB_HEALTHY_THRESHOLD: ((isolated_router_lb_healthy_threshold))
      ISOLATED_ROUTER_REQUEST_TIMEOUT_IN_SECONDS: ((isolated_router_request_timeout_in_seconds))
      ISOLATED_ROUTER_STATIC_IPS: ((isolated_router_static_ips))
      ENABLE_GROOTFS: ((enable_grootfs))
      GARDEN_DISK_CLEANUP: ((garden_disk_cleanup))
      GOROUTER_SSL_CIPHERS: ((gorouter_ssl_ciphers))
      HAPROXY_FORWARD_TLS: ((haproxy_forward_tls))
      HAPROXY_FORWARD_TLS_ENABLE_BACKEND_CA: ((haproxy_forward_tls_enable_backend_ca))
      HAPROXY_MAX_BUFFER_SIZE: ((haproxy_max_buffer_size))
      HAPROXY_SSL_CIPHERS: ((haproxy_ssl_ciphers))
      ISOLATION_SEGMENT_DOMAINS: ((isolation_segment_domains))
      NETWORKING_POE_SSL_NAME: ((networking_poe_ssl_name))
      NETWORKING_POE_SSL_CERT_PEM: ((networking_poe_ssl_cert_pem))
      NETWORKING_POE_SSL_CERT_PRIVATE_KEY_PEM: ((networking_poe_ssl_cert_private_key_pem))
      NFS_VOLUME_DRIVER: ((nfs_volume_driver))
      NFS_VOLUME_DRIVER_ENABLE_LDAP_SERVER_HOST: ((nfs_volume_driver_enable_ldap_server_host))
      NFS_VOLUME_DRIVER_ENABLE_LDAP_SERVER_PORT: ((nfs_volume_driver_enable_ldap_server_port))
      NFS_VOLUME_DRIVER_ENABLE_LDAP_SERVICE_ACCOUNT_PASSWORD: ((nfs_volume_driver_enable_ldap_service_account_password))
      NFS_VOLUME_DRIVER_ENABLE_LDAP_SERVICE_ACCOUNT_USER: ((nfs_volume_driver_enable_ldap_service_account_user))
      NFS_VOLUME_DRIVER_ENABLE_LDAP_USER_FQDN: ((nfs_volume_driver_enable_ldap_user_fqdn))
      ROUTER_BACKEND_MAX_CONN: ((router_backend_max_conn))
      ROUTER_CLIENT_CERT_VALIDATION: ((router_client_cert_validation))
      ROUTER_ENABLE_PROXY: ((router_enable_proxy))
      ROUTING_CUSTOM_CA_CERTIFICATES: ((routing_custom_ca_certificates))
      ROUTING_DISABLE_HTTP: ((routing_disable_http))
      ROUTING_MINIMUM_TLS_VERSION: ((routing_minimum_tls_version))
      ROUTING_TABLE_SHARDING_MODE: ((routing_table_sharding_mode))
      ROUTING_TLS_TERMINATION: ((routing_tls_termination))
      SKIP_CERT_VERIFY: ((skip_cert_verify))
      SYSTEM_LOGGING: ((system_logging))
      SYSTEM_LOGGING_ENABLED_HOST: ((system_logging_enabled_host))
      SYSTEM_LOGGING_ENABLED_PORT: ((system_logging_enabled_port))
      SYSTEM_LOGGING_ENABLED_PROTOCOL: ((system_logging_enabled_protocol))
      SYSTEM_LOGGING_ENABLED_SYSLOG_RULE: ((system_logging_enabled_syslog_rule))
      SYSTEM_LOGGING_ENABLED_TLS_CA_CERT: ((system_logging_enabled_tls_ca_cert))
      SYSTEM_LOGGING_ENABLED_TLS_ENABLED: ((system_logging_enabled_tls_enabled))
      SYSTEM_LOGGING_ENABLED_TLS_PERMITTED_PEER: ((system_logging_enabled_tls_permitted_peer))
      SYSTEM_LOGGING_ENABLED_USE_TCP_FOR_FILE_FORWARDING_LOCAL_TRANSPORT: ((system_logging_enabled_use_tcp_for_file_forwarding_local_transport))
      ISOLATED_HA_PROXY_INSTANCES: ((isolated_ha_proxy_instances))
      ISOLATED_HA_PROXY_INSTANCE_TYPE: ((isolated_ha_proxy_instance_type))
      ISOLATED_ROUTER_INSTANCES: ((isolated_router_instances))
      ISOLATED_ROUTER_INSTANCE_TYPE: ((isolated_router_instance_type))
      ISOLATED_DIEGO_CELL_INSTANCES: ((isolated_diego_cell_instances))
      ISOLATED_DIEGO_CELL_INSTANCE_TYPE: ((isolated_diego_cell_instance_type))

- name: disable-errands
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [config-product]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*om-linux*"
      passed: [config-product]
    - get: jq
      params:
        globs:
        - "*linux64*"
      passed: [config-product]

  - task: disable-errands
    file: pipelines-repo/tasks/disable-errands/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))
      ERRANDS: ((errands_to_disable))

- name: apply-changes
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [disable-errands]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      passed: [config-product]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
      passed: [disable-errands]

  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
